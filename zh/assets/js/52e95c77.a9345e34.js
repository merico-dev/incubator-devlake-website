"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[1613],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),d=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=d(n),h=i,_=p["".concat(m,".").concat(h)]||p[h]||c[h]||o;return n?a.createElement(_,l(l({ref:t},s),{},{components:n})):a.createElement(_,l({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=p;var r={};for(var m in t)hasOwnProperty.call(t,m)&&(r[m]=t[m]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const o={title:"DORA - Lead Time for Changes",description:"DORA - Lead Time for Changes\n",sidebar_position:19},l=void 0,r={unversionedId:"Metrics/LeadTimeForChanges",id:"Metrics/LeadTimeForChanges",title:"DORA - Lead Time for Changes",description:"DORA - Lead Time for Changes\n",source:"@site/docs/Metrics/LeadTimeForChanges.md",sourceDirName:"Metrics",slug:"/Metrics/LeadTimeForChanges",permalink:"/zh/docs/Metrics/LeadTimeForChanges",draft:!1,editUrl:"https://github.com/apache/incubator-devlake-website/edit/main/docs/Metrics/LeadTimeForChanges.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{title:"DORA - Lead Time for Changes",description:"DORA - Lead Time for Changes\n",sidebar_position:19},sidebar:"docsSidebar",previous:{title:"DORA - Deployment Frequency",permalink:"/zh/docs/Metrics/DeploymentFrequency"},next:{title:"DORA - Median Time to Restore Service",permalink:"/zh/docs/Metrics/MTTR"}},m={},d=[{value:"What is this metric?",id:"what-is-this-metric",level:2},{value:"Why is it important?",id:"why-is-it-important",level:2},{value:"Which dashboard(s) does it exist in",id:"which-dashboards-does-it-exist-in",level:2},{value:"How is it calculated?",id:"how-is-it-calculated",level:2},{value:"How to improve?",id:"how-to-improve",level:2}],s={toc:d};function c(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-is-this-metric"},"What is this metric?"),(0,i.kt)("p",null,"The median amount of time for a commit to be deployed into production."),(0,i.kt)("h2",{id:"why-is-it-important"},"Why is it important?"),(0,i.kt)("p",null,"This metric measures the time it takes to commit code to the production environment and reflects the speed of software delivery. A lower average change preparation time means that your team is efficient at coding and deploying your project."),(0,i.kt)("h2",{id:"which-dashboards-does-it-exist-in"},"Which dashboard(s) does it exist in"),(0,i.kt)("p",null,"DORA dashboard. See ",(0,i.kt)("a",{parentName:"p",href:"https://grafana-lake.demo.devlake.io/grafana/d/qNo8_0M4z/dora?orgId=1"},"live demo"),"."),(0,i.kt)("h2",{id:"how-is-it-calculated"},"How is it calculated?"),(0,i.kt)("p",null,"This metric can be calculated in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If a deployment can be linked to PRs, then the lead time for changes of a deployment is the average cycle time of its associated PRs. For instance,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Compared to the previous deployment ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-2")," deployed three new commits ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-3"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"commit-1")," is linked to ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-2")," is linked to ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-3")," is not linked to any PR. Then, ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-2")," is associated with ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-3"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Deploy-2"),"'s lead time for changes = average cycle time of ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pr-3"),"."))),(0,i.kt)("li",{parentName:"ul"},"If a deployment can't be linked to PRs, then the lead time for changes is computed based on its associated commits. For instance,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Compared to the previous deployment ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-2")," deployed three new commits ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-3"),"."),(0,i.kt)("li",{parentName:"ul"},"None of ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-3")," is linked to any PR. "),(0,i.kt)("li",{parentName:"ul"},"Calculate each commit's lead time for changes, which equals to ",(0,i.kt)("inlineCode",{parentName:"li"},"deploy-2"),"'s deployed_at - commit's authored_date"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Deploy-2"),"'s Lead time for changes = average lead time for changes of ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-2")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"commit-3"),".")))),(0,i.kt)("p",null,"Below are the benchmarks for different development teams from Google's report. However, it's difficult to tell which group a team falls into when the team's median lead time for changes is ",(0,i.kt)("inlineCode",{parentName:"p"},"between one week and one month"),". Therefore, DevLake provides its own benchmarks to address this problem:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Groups"),(0,i.kt)("th",{parentName:"tr",align:null},"Benchmarks"),(0,i.kt)("th",{parentName:"tr",align:null},"DevLake Benchmarks"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Elite performers"),(0,i.kt)("td",{parentName:"tr",align:null},"Less than one hour"),(0,i.kt)("td",{parentName:"tr",align:null},"Less than one hour")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"High performers"),(0,i.kt)("td",{parentName:"tr",align:null},"Between one day and one week"),(0,i.kt)("td",{parentName:"tr",align:null},"Less than one week")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Medium performers"),(0,i.kt)("td",{parentName:"tr",align:null},"Between one month and six months"),(0,i.kt)("td",{parentName:"tr",align:null},"Between one week and six months")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Low performers"),(0,i.kt)("td",{parentName:"tr",align:null},"More than six months"),(0,i.kt)("td",{parentName:"tr",align:null},"More than six months")))),(0,i.kt)("p",null,(0,i.kt)("i",null,"Source: 2021 Accelerate State of DevOps, Google")),(0,i.kt)("b",null,"Data Sources Required"),(0,i.kt)("p",null,"This metric relies on deployments collected in multiple ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open APIs of Jenkins, GitLab, GitHub, etc."),(0,i.kt)("li",{parentName:"ul"},"Webhook for general CI tools."),(0,i.kt)("li",{parentName:"ul"},"Releases and PR/MRs from GitHub, GitLab APIs, etc.")),(0,i.kt)("b",null,"Transformation Rules Required"),(0,i.kt)("p",null,"This metric relies on the deployment configuration in Jenkins, GitLab or GitHub transformation rules to let DevLake know what CI builds/jobs can be regarded as deployments."),(0,i.kt)("b",null,"SQL Queries"),(0,i.kt)("p",null,"If you want to measure the monthly trend of median lead time for changes as the picture shown below, run the following SQL in Grafana."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(95784).Z,width:"1352",height:"606"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"with _deployment_change_lead_time as (\n-- to get each deployment's change lead time\n    SELECT\n        ct.id as deployment_id,\n        ct.name as deployment_name,\n        date_format(ct.finished_date,'%y/%m') as month,\n        avg(pr.change_timespan) as change_lead_time_of_a_deployment\n    FROM\n        cicd_tasks ct \n        join cicd_pipeline_commits cpc on ct.pipeline_id = cpc.pipeline_id\n        join pull_requests pr on cpc.commit_sha = pr.merge_commit_sha\n    WHERE\n        ct.type = 'DEPLOYMENT'\n        and ct.result = 'success'\n        and $__timeFilter(ct.finished_date)\n    GROUP BY 1,2,3\n),\n\n_find_median_clt_each_month as (\n    SELECT \n        x.month, x.change_lead_time_of_a_deployment\n    from _deployment_change_lead_time x join _deployment_change_lead_time y on x.month = y.month\n    WHERE x.change_lead_time_of_a_deployment is not null and y.change_lead_time_of_a_deployment is not null\n    GROUP BY x.month, x.change_lead_time_of_a_deployment\n    HAVING SUM(SIGN(1-SIGN(y.change_lead_time_of_a_deployment-x.change_lead_time_of_a_deployment)))/COUNT(*) > 0.5\n),\n\n_find_clt_rank_each_month as (\n    SELECT\n        *,\n        rank() over(PARTITION BY month ORDER BY change_lead_time_of_a_deployment) as _rank \n    FROM\n        _find_median_clt_each_month\n),\n\n_clt as (\n    SELECT\n        month,\n        change_lead_time_of_a_deployment as med_change_lead_time\n    from _find_clt_rank_each_month\n    WHERE _rank = 1\n),\n\n_calendar_months as(\n-- to   deal with the month with no incidents\n    SELECT date_format(CAST((SYSDATE()-INTERVAL (month_index) MONTH) AS date), '%y/%m') as month\n    FROM ( SELECT 0 month_index\n            UNION ALL SELECT   1  UNION ALL SELECT   2 UNION ALL SELECT   3\n            UNION ALL SELECT   4  UNION ALL SELECT   5 UNION ALL SELECT   6\n            UNION ALL SELECT   7  UNION ALL SELECT   8 UNION ALL SELECT   9\n            UNION ALL SELECT   10 UNION ALL SELECT  11\n        ) month_index\n    WHERE (SYSDATE()-INTERVAL (month_index) MONTH) > SYSDATE()-INTERVAL 6 MONTH \n)\n\nSELECT \n    cm.month,\n    case \n        when _clt.med_change_lead_time is null then 0 \n        else _clt.med_change_lead_time/60 end as med_change_lead_time_in_hour\nFROM \n    _calendar_months cm\n    left join _clt on cm.month = _clt.month\nORDER BY 1\n")),(0,i.kt)("p",null,"If you want to measure in which category your team falls into as the picture shown below, run the following SQL in Grafana."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(94320).Z,width:"672",height:"372"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'with _deployment_change_lead_time as (\n-- get one deployment\'s change lead time\n    SELECT\n        ct.id as deployment_id,\n        ct.name as deployment_name,\n        ct.finished_date as deployed_at,\n        avg(pr.change_timespan) as change_lead_time_of_a_deployment\n    FROM\n        cicd_tasks ct \n        join cicd_pipeline_commits cpc on ct.pipeline_id = cpc.pipeline_id\n        join pull_requests pr on cpc.commit_sha = pr.merge_commit_sha\n    WHERE\n        ct.type = \'DEPLOYMENT\'\n        and ct.result = \'success\'\n        and $__timeFilter(ct.finished_date)\n    GROUP BY 1,2,3\n),\n\n_median_change_lead_time as (\n    SELECT x.change_lead_time_of_a_deployment as median_change_lead_time from _deployment_change_lead_time x, _deployment_change_lead_time y\n    WHERE x.change_lead_time_of_a_deployment is not null and y.change_lead_time_of_a_deployment is not null\n    GROUP BY x.change_lead_time_of_a_deployment\n    HAVING SUM(SIGN(1-SIGN(y.change_lead_time_of_a_deployment-x.change_lead_time_of_a_deployment)))/COUNT(*) > 0.5\n    LIMIT 1\n)\n\nSELECT \n  CASE\n    WHEN median_change_lead_time < 60 then "Less than one hour"\n    WHEN median_change_lead_time < 7 * 24 * 60 then "Less than one week"\n    WHEN median_change_lead_time < 180 * 24 * 60 then "Between one week and six months"\n    ELSE "More than six months"\n    END as median_change_lead_time\nFROM _median_change_lead_time\n')),(0,i.kt)("h2",{id:"how-to-improve"},"How to improve?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Break requirements into smaller, more manageable deliverables"),(0,i.kt)("li",{parentName:"ul"},"Optimize the code review process"),(0,i.kt)("li",{parentName:"ul"},'"Shift left", start QA early and introduce more automated tests'),(0,i.kt)("li",{parentName:"ul"},"Integrate CI/CD tools to automate the deployment process")))}c.isMDXComponent=!0},95784:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/lead-time-for-changes-monthly-7086f1b85f30342aa7385a1baaa026d1.jpeg"},94320:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/lead-time-for-changes-text-72b5acf3e122fd45e87c1a1acdc4d4fd.jpeg"}}]);