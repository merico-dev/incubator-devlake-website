"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[4310],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58108:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"customize",description:"Customize Plugin\n"},l=void 0,o={unversionedId:"Plugins/customize",id:"Plugins/customize",title:"customize",description:"Customize Plugin\n",source:"@site/docs/Plugins/customize.md",sourceDirName:"Plugins",slug:"/Plugins/customize",permalink:"/zh/docs/Plugins/customize",draft:!1,editUrl:"https://github.com/apache/incubator-devlake-website/edit/main/docs/Plugins/customize.md",tags:[],version:"current",frontMatter:{title:"customize",description:"Customize Plugin\n"},sidebar:"docsSidebar",previous:{title:"Plugins",permalink:"/zh/docs/Plugins"},next:{title:"DBT",permalink:"/zh/docs/Plugins/dbt"}},s={},p=[{value:"Summary",id:"summary",level:2},{value:"Sample Request",id:"sample-request",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"This plugin provides users the ability to create/delete columns and extract data from certain raw layer tables.\nThe columns created with this plugin must be start with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"x_")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," All columns created by this plugin are of the datatype ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR(255)")),(0,r.kt)("h2",{id:"sample-request"},"Sample Request"),(0,r.kt)("p",null,"To extract data, switch to ",(0,r.kt)("inlineCode",{parentName:"p"},"Advanced Mode")," on the the first step of creating a Blueprint and paste a JSON config as the following:"),(0,r.kt)("p",null,"The example below demonstrates how to extract status name from the table ",(0,r.kt)("inlineCode",{parentName:"p"},"_raw_jira_api_issues")," and assign it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"x_test")," column of the table ",(0,r.kt)("inlineCode",{parentName:"p"},"issues"),".\nWe leverage the package ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/tidwall/gjson")," to extract value from the JSON. For the extraction syntax, please refer to this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tidwall/gjson/blob/master/SYNTAX.md"},"docs")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table"),": domain layer table name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rawDataTable"),": raw layer table, from which we extract values by json path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rawDataParams"),": the filter to select records from the raw layer table (",(0,r.kt)("strong",{parentName:"li"},"The value should be a string not an object"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping")," the extraction rule; the key is the extension field name; the value is json path")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  [\n    {\n      "plugin":"customize",\n      "options":{\n        "transformationRules":[\n          {\n            "table":"issues", \n            "rawDataTable":"_raw_jira_api_issues", \n            "rawDataParams":"{\\"ConnectionId\\":1,\\"BoardId\\":8}", \n            "mapping":{\n              "x_test":"fields.status.name" \n            }\n          }\n        ]\n      }\n    }\n  ]\n]\n')),(0,r.kt)("p",null,"You can also trigger data extraction by making a POST request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/pipelines"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl \'http://localhost:8080/pipelines\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'\n{\n    "name": "extract fields",\n    "plan": [\n        [\n            {\n                "plugin": "customize",\n                "options": {\n                    "transformationRules": [\n                        {\n                            "table": "issues",\n                            "rawDataTable": "_raw_jira_api_issues",\n                            "rawDataParams": "{\\"ConnectionId\\":1,\\"BoardId\\":8}",\n                            "mapping": {\n                                "x_test": "fields.status.name"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    ]\n}\n\'\n')),(0,r.kt)("p",null,"Get all extension columns(start with ",(0,r.kt)("inlineCode",{parentName:"p"},"x_"),") of the table ",(0,r.kt)("inlineCode",{parentName:"p"},"issues")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"GET /plugins/customize/issues/fields")),(0,r.kt)("p",null,"response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "columnName": "x_test",\n        "columnType": "VARCHAR(255)"\n    }\n]\n')),(0,r.kt)("p",null,"Create extension column ",(0,r.kt)("inlineCode",{parentName:"p"},"x_test")," for the table ",(0,r.kt)("inlineCode",{parentName:"p"},"issues")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"POST /plugins/customize/issues/fields"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "x_test"\n}\n')),(0,r.kt)("p",{parentName:"blockquote"},"Drop the column ",(0,r.kt)("inlineCode",{parentName:"p"},"x_text")," for the table ",(0,r.kt)("inlineCode",{parentName:"p"},"issues"),"\nDELETE /plugins/customize/issues/fields/x_test")))}c.isMDXComponent=!0}}]);